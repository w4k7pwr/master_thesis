# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~teb_autosize
0.default= True
0.type= bool
0.desc=Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended) 
1.name= ~dt_ref
1.default= 0.3
1.type= double
1.desc=Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1/control_rate) Range: 0.01 to 1.0
2.name= ~dt_hysteresis
2.default= 0.1
2.type= double
2.desc=Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref Range: 0.002 to 0.5
3.name= ~global_plan_overwrite_orientation
3.default= True
3.type= bool
3.desc=Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically 
4.name= ~max_global_plan_lookahead_dist
4.default= 3.0
4.type= double
4.desc=Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size] Range: 0.0 to 50.0
5.name= ~force_reinit_new_goal_dist
5.default= 1.0
5.type= double
5.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting) Range: 0.0 to 10.0
6.name= ~feasibility_check_no_poses
6.default= 5
6.type= int
6.desc=Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval Range: 0 to 50
7.name= ~global_plan_viapoint_sep
7.default= -0.1
7.type= double
7.desc=Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled] Range: -0.1 to 5.0
8.name= ~via_points_ordered
8.default= False
8.type= bool
8.desc=If true, the planner adheres to the order of via-points in the storage container 
9.name= ~publish_feedback
9.default= False
9.type= bool
9.desc=Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes) 
10.name= ~shrink_horizon_backup
10.default= True
10.type= bool
10.desc=Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues. 
11.name= ~max_vel_x
11.default= 0.4
11.type= double
11.desc=Maximum translational velocity of the robot Range: 0.01 to 2.0
12.name= ~max_vel_x_backwards
12.default= 0.2
12.type= double
12.desc=Maximum translational velocity of the robot for driving backwards Range: 0.01 to 2.0
13.name= ~max_vel_theta
13.default= 0.3
13.type= double
13.desc=Maximum angular velocity of the robot Range: 0.01 to 2.0
14.name= ~acc_lim_x
14.default= 0.5
14.type= double
14.desc=Maximum translational acceleration of the robot Range: 0.01 to 2.0
15.name= ~acc_lim_theta
15.default= 0.5
15.type= double
15.desc=Maximum angular acceleration of the robot Range: 0.01 to 2.0
16.name= ~min_turning_radius
16.default= 0.0
16.type= double
16.desc=Minimum turning radius of a carlike robot (diff-drive robot: zero) Range: 0.0 to 5.0
17.name= ~wheelbase
17.default= 1.0
17.type= double
17.desc=The distance between the drive shaft and steering axle (only required for a carlike robot with 'cmd_angle_instead_rotvel' enabled); The value might be negative for back-wheeled robots! Range: -3.0 to 3.0
18.name= ~cmd_angle_instead_rotvel
18.default= False
18.type= bool
18.desc=Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check 'axles_distance') 
19.name= ~xy_goal_tolerance
19.default= 0.2
19.type= double
19.desc=Allowed final euclidean distance to the goal position Range: 0.001 to 10.0
20.name= ~yaw_goal_tolerance
20.default= 0.1
20.type= double
20.desc=Allowed final orientation error to the goal orientation Range: 0.001 to 3.2
21.name= ~free_goal_vel
21.default= False
21.type= bool
21.desc=Allow the robot's velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed) 
22.name= ~min_obstacle_dist
22.default= 0.5
22.type= double
22.desc=Minimum desired separation from obstacles Range: 0.0 to 3.0
23.name= ~inflation_dist
23.default= 0.0
23.type= double
23.desc=Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 6.0
24.name= ~include_costmap_obstacles
24.default= True
24.type= bool
24.desc=Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented) 
25.name= ~costmap_obstacles_behind_robot_dist
25.default= 1.0
25.type= double
25.desc=Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters) Range: 0.0 to 20.0
26.name= ~obstacle_poses_affected
26.default= 30
26.type= int
26.desc=The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well Range: 0 to 200
27.name= ~no_inner_iterations
27.default= 5
27.type= int
27.desc=Number of solver iterations called in each outerloop iteration Range: 1 to 100
28.name= ~no_outer_iterations
28.default= 4
28.type= int
28.desc=Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations Range: 1 to 100
29.name= ~optimization_activate
29.default= True
29.type= bool
29.desc=Activate the optimization 
30.name= ~optimization_verbose
30.default= False
30.type= bool
30.desc=Print verbose information 
31.name= ~penalty_epsilon
31.default= 0.1
31.type= double
31.desc=Add a small safty margin to penalty functions for hard-constraint approximations Range: 0.0 to 0.3
32.name= ~weight_max_vel_x
32.default= 0.0
32.type= double
32.desc=Optimization weight for satisfying the maximum allowed translational velocity Range: 2.0 to 1000.0
33.name= ~weight_max_vel_theta
33.default= 0.0
33.type= double
33.desc=Optimization weight for satisfying the maximum allowed angular velocity Range: 1.0 to 1000.0
34.name= ~weight_acc_lim_x
34.default= 0.0
34.type= double
34.desc=Optimization weight for satisfying the maximum allowed translational acceleration Range: 1.0 to 1000.0
35.name= ~weight_acc_lim_theta
35.default= 0.0
35.type= double
35.desc=Optimization weight for satisfying the maximum allowed angular acceleration Range: 1.0 to 1000.0
36.name= ~weight_kinematics_nh
36.default= 1000.0
36.type= double
36.desc=Optimization weight for satisfying the non-holonomic kinematics Range: 0.0 to 10000.0
37.name= ~weight_kinematics_forward_drive
37.default= 1.0
37.type= double
37.desc=Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot) Range: 0.0 to 1000.0
38.name= ~weight_kinematics_turning_radius
38.default= 1.0
38.type= double
38.desc=Optimization weight for enforcing a minimum turning radius (carlike robots) Range: 0.0 to 1000.0
39.name= ~weight_optimaltime
39.default= 1.0
39.type= double
39.desc=Optimization weight for contracting the trajectory w.r.t transition time Range: 0.0 to 1000.0
40.name= ~weight_obstacle
40.default= 50.0
40.type= double
40.desc=Optimization weight for satisfying a minimum seperation from obstacles Range: 0.0 to 1000.0
41.name= ~weight_inflation
41.default= 0.1
41.type= double
41.desc=Optimization weight for the inflation penalty (should be small) Range: 0.0 to 10.0
42.name= ~weight_dynamic_obstacle
42.default= 10.0
42.type= double
42.desc=Optimization weight for satisfying a minimum seperation from dynamic obstacles Range: 0.0 to 1000.0
43.name= ~weight_viapoint
43.default= 1.0
43.type= double
43.desc=Optimization weight for minimizing the distance to via-points Range: 0.0 to 1000.0
44.name= ~enable_multithreading
44.default= True
44.type= bool
44.desc=Activate multiple threading for planning multiple trajectories in parallel 
45.name= ~simple_exploration
45.default= False
45.type= bool
45.desc=If true, the homotopies are explored usign a simple left-right approach (pass each obstacle on the left or right side) for path generation, otherwise sample possible roadmaps randomly in a specified region between start and goal 
46.name= ~max_number_classes
46.default= 5
46.type= int
46.desc=Specify the maximum number of allowed alternative homotopy classes (limits computational effort) Range: 1 to 100
47.name= ~selection_cost_hysteresis
47.default= 1.0
47.type= double
47.desc=Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor) Range: 0.0 to 2.0
48.name= ~selection_obst_cost_scale
48.default= 100.0
48.type= double
48.desc=Extra scaling of obstacle cost terms just for selecting the 'best' candidate (new_obst_cost: obst_cost*factor) Range: 0.0 to 1000.0
49.name= ~selection_viapoint_cost_scale
49.default= 1.0
49.type= double
49.desc=Extra scaling of via-point cost terms just for selecting the 'best' candidate. (new_viapt_cost: viapt_cost*factor) Range: 0.0 to 100.0
50.name= ~selection_alternative_time_cost
50.default= False
50.type= bool
50.desc=If true, time cost is replaced by the total transition time. 
51.name= ~roadmap_graph_no_samples
51.default= 15
51.type= int
51.desc=Specify the number of samples generated for creating the roadmap graph, if simple_exploration is turend off Range: 1 to 100
52.name= ~roadmap_graph_area_width
52.default= 5.0
52.type= double
52.desc=Specify the width of the area in which sampled will be generated between start and goal [m] (the height equals the start-goal distance) Range: 0.1 to 20.0
53.name= ~h_signature_prescaler
53.default= 1.0
53.type= double
53.desc=Scale number of obstacle value in order to allow huge number of obstacles. Do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<H<=1) Range: 0.2 to 1.0
54.name= ~h_signature_threshold
54.default= 0.1
54.type= double
54.desc=Two h-signuteres are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold Range: 0.0 to 1.0
55.name= ~obstacle_keypoint_offset
55.default= 0.1
55.type= double
55.desc=If simple_exploration is turned on, this parameter determines the distance on the left and right side of the obstacle at which a new keypoint will be cretead (in addition to min_obstacle_dist) Range: 0.0 to 5.0
56.name= ~obstacle_heading_threshold
56.default= 0.45
56.type= double
56.desc=Specify the value of the normalized scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration) Range: 0.0 to 1.0
57.name= ~viapoints_all_candidates
57.default= True
57.type= bool
57.desc=If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same one as the initial/global plan is attached (no effect in test_optim_node). 
58.name= ~visualize_hc_graph
58.default= False
58.type= bool
58.desc=Visualize the graph that is created for exploring new homotopy classes 
}
}
# End of autogenerated section. You may edit below.
